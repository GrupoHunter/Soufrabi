Object subclass: #IVDelegator	instanceVariableNames: 'anObject'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP-Soufrabi'!!IVDelegator methodsFor: 'as yet unclassified' stamp: 'DaminCravacuore 11/1/2013 22:58'!sendMessage: aMessage	"Sends message to referenced object"	(self anObject respondsTo: aMessage)		ifTrue:[ ^self anObject perform: aMessage ]		ifFalse:[ ^self sendMessageToObjectIV: aMessage ]! !!IVDelegator methodsFor: 'as yet unclassified' stamp: 'DaminCravacuore 11/1/2013 23:36'!sendMessage: aMessage with: param	"Sends message with param to referenced object"	(self anObject respondsTo: aMessage)		ifTrue:[ ^self anObject perform: aMessage with: param ]		ifFalse:[ ^self sendMessageToObjectIV: aMessage with: param ]! !!IVDelegator methodsFor: 'as yet unclassified' stamp: 'DaminCravacuore 11/1/2013 23:41'!sendMessage: aMessage withArguments: args	"Sends message with arguments to referenced object"		(self anObject respondsTo: aMessage)		ifTrue:[ ^self anObject perform: aMessage withArguments: args ]		ifFalse:[ ^self sendMessageToObjectIV: aMessage withArguments: args ]! !!IVDelegator methodsFor: 'as yet unclassified' stamp: 'DaminCravacuore 11/1/2013 23:23'!sendMessageToObjectIV: aMessage	"Sends message to referenced object instVars"	self anObject class instVarNames do:[ :each | ((self anObject instVarNamed: each) class canUnderstand: aMessage)														ifTrue:[ ^(self anObject instVarNamed: each) perform: aMessage ] ].! !!IVDelegator methodsFor: 'as yet unclassified' stamp: 'DaminCravacuore 11/1/2013 23:31'!sendMessageToObjectIV: aMessage with: param	"Sends message to referenced object instVars"	self anObject class instVarNames do:[ :each | ((self anObject instVarNamed: each) class canUnderstand: aMessage)														ifTrue:[ ^(self anObject instVarNamed: each) 																	perform: aMessage with: param] ].! !!IVDelegator methodsFor: 'as yet unclassified' stamp: 'DaminCravacuore 11/1/2013 23:40'!sendMessageToObjectIV: aMessage withArguments: args	"Sends message to referenced object instVars"	self anObject class instVarNames do:[ :each | ((self anObject instVarNamed: each) class canUnderstand: aMessage)														ifTrue:[ ^(self anObject instVarNamed: each) 																	perform: aMessage withArguments: args] ].! !!IVDelegator methodsFor: 'accessing' stamp: 'DaminCravacuore 11/1/2013 21:00'!anObject	^ anObject! !!IVDelegator methodsFor: 'accessing' stamp: 'DaminCravacuore 11/1/2013 21:02'!anObject: object	anObject := object! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!IVDelegator class	instanceVariableNames: ''!!IVDelegator class methodsFor: 'as yet unclassified' stamp: 'DaminCravacuore 11/1/2013 22:47'!on: anObject	^(IVDelegator new) anObject: anObject.! !Object subclass: #Interface	instanceVariableNames: 'selectors'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP-Soufrabi'!!Interface methodsFor: 'as yet unclassified' stamp: 'JonatanKoelbl 11/3/2013 17:02'!addNeededStubsIn: aClass 		selectors do:[ :selector | 		((aClass canUnderstand: selector)) ifFalse:[ 			(selector isUnary ) ifTrue: [ 		aClass compile: selector,	'	"method auto-generated"	^nil.' 											]								ifFalse:["add with parameter"										] 									]						]. ! !!Interface methodsFor: 'as yet unclassified' stamp: 'JonatanKoelbl 10/27/2013 16:46'!initialize 	selectors := OrderedCollection new.! !!Interface methodsFor: 'as yet unclassified' stamp: 'JonatanKoelbl 11/3/2013 16:37'!isCompliant: aClass	"Return true if the class has method (own or inherited) to all the selectors included in the Interface"		selectors do:  [ :selector | (aClass canUnderstand: selector)ifFalse: [^false]].		^true.! !!Interface methodsFor: 'as yet unclassified' stamp: 'JonatanKoelbl 11/3/2013 16:38'!isUnderstoodBy: anObject 	"Return true if the object understand all selectors included in the interface"			selectors do: [ :selector | (anObject respondsTo: selector)ifFalse: [^false]].		^true.! !!Interface methodsFor: 'as yet unclassified' stamp: 'JonatanKoelbl 11/3/2013 17:03'!query: anObject	"Return a diccionary with all unary message included in the interface"		|unarySymbols dictionary|		dictionary := Dictionary new.		unarySymbols := anObject class methodDictionary keys select: [:selector | selector isUnary ].		unarySymbols  do: [ :symbol | dictionary at:  symbol asString put: (anObject perform:  symbol )].		^dictionary .! !!Interface methodsFor: 'as yet unclassified' stamp: 'JonatanKoelbl 11/3/2013 16:29'!selectors:  mySelectors		selectors := mySelectors.! !Object subclass: #ExampleO	instanceVariableNames: 'bla ble'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP-Soufrabi'!!ExampleO methodsFor: 'accessing' stamp: 'DaminCravacuore 11/1/2013 22:29'!bla	^ bla! !!ExampleO methodsFor: 'accessing' stamp: 'DaminCravacuore 11/1/2013 22:29'!bla: anObject	bla := anObject! !!ExampleO methodsFor: 'accessing' stamp: 'DaminCravacuore 11/1/2013 22:29'!ble	^ ble! !!ExampleO methodsFor: 'accessing' stamp: 'DaminCravacuore 11/1/2013 22:29'!ble: anObject	ble := anObject! !Object subclass: #ExampleOS	instanceVariableNames: 'bli blu'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP-Soufrabi'!!ExampleOS methodsFor: 'accessing' stamp: 'DaminCravacuore 11/1/2013 22:53'!bli	^ bli! !!ExampleOS methodsFor: 'accessing' stamp: 'DaminCravacuore 11/1/2013 22:53'!bli: anObject	bli := anObject! !!ExampleOS methodsFor: 'accessing' stamp: 'DaminCravacuore 11/1/2013 22:53'!blu	^ blu! !!ExampleOS methodsFor: 'accessing' stamp: 'DaminCravacuore 11/1/2013 22:53'!blu: anObject	blu := anObject! !!ExampleOS methodsFor: 'accessing' stamp: 'DaminCravacuore 11/1/2013 23:19'!nah: aNumber	^aNumber * 2! !